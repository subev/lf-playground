{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Dot","pickRandomFromArray","arr","Math","floor","random","length","toPercent","x","round","colors","sizes","ItemBox","item","id","dot","size","color","selected","onSelect","className","cx","onClick","Stats","str","target","items","selectedIds","useMemo","propName","value","ratio","selectedItems","filter","has","actual","difference","i","abs","String","charAt","toUpperCase","slice","TargetChart","style","left","App","n","useState","Array","from","_","idx","Object","values","Set","setSelectedItems","handleSelect","delete","add","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8497d32d.chunk.js","sourcesContent":["import { useMemo, useState } from 'react';\nimport cx from 'classnames';\nimport './App.scss';\nimport { Set } from 'immutable';\n\nenum Dot {\n  Dot = 'dot',\n  NoDot = 'no-dot',\n}\n\ntype Item = {\n  id: number;\n  dot: Dot;\n  color: string;\n  size: string;\n};\n\nconst pickRandomFromArray = <T extends unknown>(arr: T[]) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\nconst capitalize = (str: string) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nconst toPercent = (x: number) => {\n  return `${Math.round(x * 100)}%`;\n};\n\nconst pickRandomDot = (): Dot => {\n  return Object.values(Dot)[\n    Math.floor(Math.random() * Object.values(Dot).length)\n  ];\n};\n\nconst colors = ['blue', 'green', 'orange'];\nconst sizes = ['small', 'large'];\n\nconst generateMockData = (n: number): Item[] => {\n  return Array.from({ length: n }, (_, idx) => ({\n    id: idx,\n    color: pickRandomFromArray(colors),\n    size: pickRandomFromArray(sizes),\n    dot: pickRandomDot(),\n  }));\n};\n\nconst App = () => {\n  const [items] = useState(generateMockData(21));\n  const [selectedIds, setSelectedItems] = useState(Set<number>());\n\n  const handleSelect = (id: number) => {\n    if (selectedIds.has(id)) {\n      setSelectedItems(selectedIds.delete(id));\n    } else {\n      setSelectedItems(selectedIds.add(id));\n    }\n  };\n\n  const [target] = useState<{\n    propName: keyof Item;\n    value: Item[keyof Item];\n    ratio: number;\n  }>({\n    propName: 'size',\n    value: 'small',\n    ratio: 0.6,\n  });\n\n  return (\n    <div className=\"App\">\n      <Stats target={target} items={items} selectedIds={selectedIds} />\n      <div className=\"container\">\n        {items.map((i, idx) => (\n          <ItemBox\n            key={idx}\n            item={i}\n            selected={selectedIds.has(i.id)}\n            onSelect={handleSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst ItemBox = ({\n  item: { id, dot, size, color },\n  selected,\n  onSelect,\n}: {\n  item: Item;\n  selected: boolean;\n  onSelect: (id: number) => void;\n}) => {\n  return (\n    <div\n      className={cx('item-wrapper', selected && 'selected')}\n      onClick={() => onSelect(id)}\n    >\n      <div\n        className={cx(\n          'item',\n          dot === Dot.Dot && 'has-dot',\n          `color-${color}`,\n          `size-${size}`\n        )}\n      ></div>\n    </div>\n  );\n};\n\nconst Stats = ({\n  target,\n  items,\n  selectedIds,\n}: {\n  target: { propName: keyof Item; value: Item[keyof Item]; ratio: number };\n  items: Item[];\n  selectedIds: Set<number>;\n}) => {\n  const { actual, difference } = useMemo(() => {\n    const { propName, value, ratio } = target;\n    const selectedItems = items.filter((item) => selectedIds.has(item.id));\n\n    if (selectedItems.length === 0) {\n      return {\n        actual: 0,\n        difference: target.ratio,\n      };\n    }\n\n    const itemsMatchingTarget = selectedItems.filter(\n      (i) => i[propName] === value\n    );\n    const actual = itemsMatchingTarget.length / selectedItems.length;\n    const difference = Math.abs(actual - ratio);\n    return {\n      actual,\n      difference,\n    };\n  }, [items, selectedIds, target]);\n\n  return (\n    <div className=\"stats\">\n      <div>\n        {capitalize(String(target.value))} Target: {toPercent(target.ratio)}\n      </div>\n      <TargetChart actual={actual} target={target.ratio} />\n      <div className=\"live-stats\">\n        <div>Actual: {toPercent(actual)}</div>\n        <div>Difference: {toPercent(difference)}</div>\n      </div>\n    </div>\n  );\n};\n\nconst TargetChart = ({\n  actual,\n  target,\n}: {\n  actual: number;\n  target: number;\n}) => {\n  return (\n    <div className=\"target-chart\">\n      <div className=\"marker-wrapper\">\n        <div className=\"marker\" style={{ left: toPercent(target) }}></div>\n      </div>\n      <div className=\"center-line\"></div>\n      <div className=\"marker-wrapper\">\n        <div\n          className=\"marker bottom-marker\"\n          style={{ left: toPercent(actual) }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}